#!/bin/bash
#Detected wifi SSID and install wifi

############## FUNCTIONS ##############################
export OK="\\033[1;32m"
export NORMAL="\\033[0;39m"
export ERR="\\033[1;31m"
export INFO="\\033[1;34m"
export WARN="\\033[1;33m"
export PICOLOR="\\033[1;35m"
export BLACK="\\033[0;30m"
export BLUE="\\0034[0;34m"
export GREEN="\\033[0;32m"

show-isRoot() {
#Check if user is root
if [ $(id -u) -ne 0 ]; then
	show-errorBox
	echo "Script must be run as root."
	echo "Try 'sudo $0'"
	echo -ne $NORMAL
	show-errorBox
	echo -ne $NORMAL
	export PIGETERROR="no root"
	exit 1
fi
}

show-description() {
# Create a description box, Use it to describe your SCRIPT
echo -ne $WARN
echo "---- $1 ----"
echo -ne $NORMAL
}

show-listecho() {
#Generate a messagebox
# generate a list
show-nlbecho " ----->" $INFO
show-colecho "$1" $2
}

show-errorBox(){
#Display an error box
echo -ne $ERR
echo "--- ERROR : $1 ---"
echo -ne $NORMAL
}

# Colored echo (without linebreak)
# usage : colecho text color
# example : colecho "hello world" $GREEN
show-nlbecho(){
	echo -ne $2
	echo -ne "$1 "
	echo -ne $NORMAL
}

# Colored echo
# usage : colecho text color
# example : colecho "hello world" $GREEN
show-colecho(){
	text=$1
	color=$2
	echo -ne $color
	echo $text
	echo -ne $NORMAL
}

show-minibox_ERROR(){
	echo -ne " ["
	echo -ne $ERR
	echo -ne "ERROR"
	echo -ne $NORMAL
	echo "]"
}

show-minibox_OK(){
	echo -ne " ["
	echo -ne $OK
	echo -ne "OK"
	echo -ne $NORMAL
	echo "]"
}

show-minibox_SKIP(){
	echo -ne " ["
	echo -ne $INFO
	echo -ne "SKIPPED"
	echo -ne $NORMAL
	echo "]"
}

show-minibox_WARNING(){
	echo -ne " ["
	echo -ne $WARN
	echo -ne "WARNING"
	echo -ne $NORMAL
	echo "]"
}

########################################################
# Subroutines

#return menu_options with wireless networks for whiptail
scanNetwork(){
	interface=$(iwconfig 2>/dev/null | grep -o "^\w*")

if [ "$interface" == "" ]
	then
	show-listecho "No Wifi adapter founded" $ERR
	exit 1
else
	show-listecho "Scanning wireless network" $OK
	essid=$(iwlist $interface scan|grep "ESSID:"|tr -d '"'|sed -e 's/ESSID://')
	while [ "$essid" == "" ]
	do
		show-listecho "Scan Failed ... Retry ..." $WARN;
		essid=$(iwlist $interface scan|grep "ESSID:"|tr -d '"'|sed -e 's/ESSID://')
		sleep 3
	done

	while read -r access
		do 
			menu_options[ $i ]=$access
			(( i++ ))
			menu_options[ $i ]=""
			(( i++ ))
	done <<<"$essid"

fi
}

#return essid_selected
displayNetwork(){
	essid_selected=$(whiptail --backtitle "Wifi Configuration" --title "$interface" --menu "Choose your Wireless Network" 0 0 0 "${menu_options[@]}" 3>&1 1>&2 2>&3 )
	if [ "$essid_selected" == "" ]
		then
		show-listecho "Configuration incomplete" $ERR
		exit 1
	fi
}

#return password
getPassword(){
password=$(whiptail --backtitle "Wifi Configuration" --inputbox "$essid_selected" 0 0 --title "Enter Password" 3>&1 1>&2 2>&3)
if [ "$password" == "" ]
	then
	show-listecho "Configuration incomplete" $ERR
	exit 1
fi
}

saveConfiguration(){
cat <<EOF > /etc/wpa_supplicant/wpa_supplicant.conf
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
network={
	ssid="$essid_selected"
	psk="$password"
}
EOF
}


# MAIN PROGRAM ############################
#Verify if you are root
show-isRoot
show-description "Setup Wifi"

scanNetwork
displayNetwork
getPassword
show-listecho "Configuration saved" $OK
saveConfiguration

show-nlbecho " ----->" $INFO
show-nlbecho "Connecting to $essid_selected" $WARN
ifdown --force $interface > /dev/null 2>&1
ifup $interface > /dev/null 2>&1
sleep 10

isConnected=$(iwconfig $interface 2>/dev/null |grep "Not-Associated"|wc -l)
if [ $isConnected -eq 0 ];then
	show-minibox_OK
	show-listecho "Connected" $OK
else
	show-minibox_ERROR
	show-listecho "Not connected" $ERR
	iwconfig $interface
fi